# azure-pipelines.yml
trigger:
  branches:
    include:
      - main
      - master

pr:
  branches:
    include:
      - main
      - master

variables:
  # Update these values for your environment
  imageName: 'myapp'
  acrName: 'myacr'                        # e.g. myacr (without .azurecr.io)
  resourceGroup: 'rg-myapp'
  webAppName: 'myapp-web'
  dockerfilePath: 'Dockerfile'
  dockerContext: '.'
  buildConfiguration: 'Release'

  # Service connection names in Azure DevOps
  azureServiceConnection: 'AzureServiceConnection'      # Azure Resource Manager service connection
  dockerRegistryServiceConnection: 'ACR-ServiceConnection'  # Service connection for ACR (type: Docker Registry or Azure Container Registry)

stages:
  - stage: Build
    displayName: Build & Test
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Checkout@3

          - task: NodeTool@0                     # Example - install Node (remove/replace for other stacks)
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node 20'

          - script: |
              npm ci
              npm run lint || true
            displayName: 'Install dependencies & lint'

          - script: |
              npm test
            displayName: 'Run tests'

          - task: Docker@2
            displayName: 'Build Docker image'
            inputs:
              command: 'build'
              Dockerfile: '$(dockerfilePath)'
              buildContext: '$(dockerContext)'
              tags: |
                $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
                $(acrName).azurecr.io/$(imageName):latest

  - stage: PushImage
    displayName: Push image to ACR
    dependsOn: Build
    jobs:
      - job: Push
        displayName: Push
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: 'Login to ACR & Push'
            inputs:
              command: 'login'
              containerRegistry: '$(dockerRegistryServiceConnection)'
          - task: Docker@2
            displayName: 'Push tags'
            inputs:
              command: 'push'
              repository: '$(acrName).azurecr.io/$(imageName)'
              tags: |
                $(Build.BuildId)
                latest
              containerRegistry: '$(dockerRegistryServiceConnection)'

  - stage: DeployToWebApp
    displayName: Deploy to Azure Web App for Containers
    dependsOn: PushImage
    jobs:
      - deployment: DeployWebApp
        displayName: Deploy web app container
        environment: 'production'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Configure Web App to use image from ACR'
                  inputs:
                    azureSubscription: '$(azureServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      # variables
                      IMAGE="$(acrName).azurecr.io/$(imageName):$(Build.BuildId)"
                      echo "Setting container to $IMAGE for webapp $(webAppName)"
                      az webapp config container set \
                        --name "$(webAppName)" \
                        --resource-group "$(resourceGroup)" \
                        --docker-custom-image-name "$IMAGE" \
                        --docker-registry-server-url "https://$(acrName).azurecr.io"

                      # Optional: restart web app to pick up image
                      az webapp restart --name "$(webAppName)" --resource-group "$(resourceGroup)"

                - task: AzureCLI@2
                  displayName: 'Swap staging slot (optional zero-downtime)'
                  inputs:
                    azureSubscription: '$(azureServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      # Use this if you have a staging slot named "staging"
                      # az webapp deployment slot swap --resource-group $(resourceGroup) --name $(webAppName) --slot staging --target-slot production
                      echo "Slot swap step skipped by default. Uncomment to enable."

  # Optional: AKS deployment stage
  - stage: DeployToAKS
    displayName: Deploy to AKS (optional)
    dependsOn: PushImage
    condition: and(succeeded(), eq(variables['deployToAKS'], 'true')) # set pipeline variable deployToAKS=true to run
    jobs:
      - job: DeployAKS
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Kubernetes@1
            displayName: 'kubectl apply - manifest'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(azureServiceConnection)'
              azureResourceGroup: '$(resourceGroup)'
              kubernetesCluster: 'myAKSCluster'     # update cluster name
              namespace: default
              command: apply
              useConfigurationFile: true
              configuration: |
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: $(imageName)-deployment
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: $(imageName)
                  template:
                    metadata:
                      labels:
                        app: $(imageName)
                    spec:
                      containers:
                        - name: $(imageName)
                          image: $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
                          ports:
                            - containerPort: 3000
